#terraform
terraform{
    backend "s3" {
    bucket         = "zoon-tf-state-bucket"
    key            = "terraform.tfstate"
    region         = "ap-south-1"
    encrypt        = true
    
  }

    required_providers{
        aws = {
            source = "Hashicorp/aws"
            version = "~>5.40.0"
        }
    }
}
#provider
provider "aws" {
    region = "ap-south-1"
}
#resource
#vpc
resource "aws_vpc" "myvpc" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "MY-VPC"
  }
}
#pubsubnet
resource "aws_subnet" "pubsub" {
  vpc_id     = aws_vpc.myvpc.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "PUB-SUBNET"
  }
}
#pvtsubnet
resource "aws_subnet" "pvtsub" {
  vpc_id     = aws_vpc.myvpc.id
  cidr_block = "10.0.2.0/24"

  tags = {
    Name = "PVT-SUBNET"
  }
}
#igw
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.myvpc.id

  tags = {
    Name = "IGW"
  }
}
#pub-rt
resource "aws_route_table" "pubrt" {
  vpc_id = aws_vpc.myvpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "PUB-RT"
  }
}
#assc-pubsn-pubrt
resource "aws_route_table_association" "pubsnpubrt" {
  subnet_id      = aws_subnet.pubsub.id
  route_table_id = aws_route_table.pubrt.id
}
#pvt-rt
resource "aws_route_table" "pvtrt" {
  vpc_id = aws_vpc.myvpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.natgw.id
  }

  tags = {
    Name = "PVT-RT"
  }
}
  #assc-pvtsn-pvtrt
resource "aws_route_table_association" "pvtsnspvtrt" {
  gateway_id     = aws_nat_gateway.natgw.id
  route_table_id = aws_route_table.pvtrt.id
}
#natgw
resource "aws_nat_gateway" "natgw" {
  allocation_id = aws_eip.eip.id
  subnet_id     = aws_subnet.pubsub.id

  tags = {
    Name = "NATGW"
  }
}
#eip
resource "aws_eip" "eip" {
  domain   = "vpc"
}
#webserver
resource "aws_instance" "webserver"{
    ami = "ami-05c179eced2eb9b5b"
    instance_type = "t2.micro"
    key_name = "08Jan"
    associate_public_ip_address = "true"
    subnet_id = aws_subnet.pubsub.id
    vpc_security_group_ids = ["${aws_security_group.allow_tls.id}"]
    tags = {
        name = "Webserver"
    }
}
#appserver
resource "aws_instance" "appserver"{
    ami = "ami-05c179eced2eb9b5b"
    instance_type = "t2.micro"
    key_name = "08Jan"
    associate_public_ip_address = "false"
    subnet_id = aws_subnet.pvtsub.id
    vpc_security_group_ids = ["${aws_security_group.allow_tls.id}"]
    tags = {
        name = "Appserver"
    }
}
#pubsg
resource "aws_security_group" "allow_tls" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic and all outbound traffic"
  vpc_id      = aws_vpc.myvpc.id

  tags = {
    Name = "allow_tls"
  }
}

resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4" {
  security_group_id = aws_security_group.allow_tls.id
  cidr_ipv4         = aws_vpc.myvpc.cidr_block
  from_port         = 80
  ip_protocol       = "tcp"
  to_port           = 80
}


resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
  security_group_id = aws_security_group.allow_tls.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1" # semantically equivalent to all ports
}
#pvtsg
