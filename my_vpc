terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = "ap-south-1"
}

#VPC
resource "aws_vpc" "myvpc" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "MYVPC"
  }
}
#PUBLIC SUBNET
resource "aws_subnet" "pubsubnet" {
  vpc_id     = aws_vpc.myvpc.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "ap-south-1a"

  tags = {
    Name = "PUB-SUBNET"
  }
}

#PRIVATE SUBNET
resource "aws_subnet" "pvtsubnet" {
  vpc_id     = aws_vpc.myvpc.id
  cidr_block = "10.0.2.0/24"
  availability_zone = "ap-south-1b"

  tags = {
    Name = "PVT-SUBNET"
  }
}
#INTERNET GATEWAY
resource "aws_internet_gateway" "myigw" {
  vpc_id = aws_vpc.myvpc.id

  tags = {
    Name = "MYIGW"
  }
}
#PUBLIC ROUTE TABLE
resource "aws_route_table" "pubrt" {
  vpc_id = aws_vpc.myvpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.myigw.id
  }
  tags = {
    Name = "PUBRT"
  }
}
#PRIVATE ROUTE TABLE
resource "aws_route_table" "pvtrt" {
  vpc_id = aws_vpc.myvpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.natgw.id
  }
  tags = {
    Name = "PVTRT"
  }
}
#NAT GATEWAY
resource "aws_nat_gateway" "natgw" {
  allocation_id = aws_eip.myeip.id
  subnet_id     = aws_subnet.pubsubnet.id

  tags = {
    Name = "NATGW"
  }
}
#ELASTC IP
resource "aws_eip" "myeip" {
  domain   = "vpc"
}
#ASSC (PUB SUB - PUB RT)
resource "aws_route_table_association" "pubsub_pubrt" {
  subnet_id      = aws_subnet.pubsubnet.id
  route_table_id = aws_route_table.pubrt.id
}
#ASSC (PVT SUB - PVT RT)
resource "aws_route_table_association" "pvtsub_pvtrt" {
  subnet_id      = aws_subnet.pvtsubnet.id
  route_table_id = aws_route_table.pvtrt.id
}
#PUBLIC SECURITY GROUP
resource "aws_security_group" "allow_tls" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic and all outbound traffic"
  vpc_id      = aws_vpc.myvpc.id

  tags = {
    Name = "allow_tls"
  }
}

resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4" {
  security_group_id = aws_security_group.allow_tls.id
  cidr_ipv4         = aws_vpc.myvpc.cidr_block
  from_port         = 80
  ip_protocol       = "tcp"
  to_port           = 80
}

resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
  security_group_id = aws_security_group.allow_tls.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1" # semantically equivalent to all ports
}

#PRIVATE SECURITY GROUP
#WEB SERVER
resource "aws_instance" "webserver" {
  ami           = "ami-00bb6a80f01f03502"
  instance_type = "t2.micro"
  associate_public_ip_address = true
  subnet_id = aws_subnet.pubsubnet.id
  vpc_security_group_ids = ["${aws_security_group.allow_tls.id}"]

  tags = {
    Name = "WEBSERVER"
  }
}
#APP SERVER
resource "aws_instance" "appserver" {
  ami           = "ami-00bb6a80f01f03502"
  instance_type = "t2.micro"
  subnet_id = aws_subnet.pvtsubnet.id
  vpc_security_group_ids = ["${aws_security_group.allow_tls.id}"]

  tags = {
    Name = "APPSERVER"
  }
}
